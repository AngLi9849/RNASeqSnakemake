log <- file(snakemake@log[[1]], open="wt")
sink(log)
sink(log, type="message")

options(error=function()traceback(2))

library(DEXSeq)
library(ggrepel)
library(ashr)
library(dplyr)
library(tools)

parallel <- FALSE
if (snakemake@threads > 1) {
    library("BiocParallel")
    # setup parallelization
    register(MulticoreParam(snakemake@threads))
    parallel <- TRUE
}

# Import snakemake parameters and inputs
dir <- as.character(snakemake@params[["dir"]])
dir.create(dir)

exp <- as.character(snakemake@wildcards[["experiment"]])
paired <- snakemake@params[["paired"]]
goi <- snakemake@params[["goi"]]

sample_table <- read.table(snakemake@params[["sample_table"]],header=T,sep='\t')
sample_table$sample_name <- paste(sample_table$condition,"_Rep_",sample_table$replicate,sep="")
rownames(sample_table) <- sample_table$sample_name
sample_table <- sample_table[sample_table$experiment==snakemake@wildcards[["experiment"]],]


control <- as.character(snakemake@params[["control"]])
experiments <- unique(as.character(sample_table$condition[sample_table$condition != control]))
change <- "Splicing Ratio"
counting <- "Splice Site Reads"
prefix <- gsub("([[:lower:]])([[:upper:]])",perl=TRUE,"\\1 \\2",as.character(snakemake@wildcards[["prefix"]]))
biotypes <- c(snakemake@params[["biotypes"]])

genes <- read.csv(snakemake@input[["genetab"]],sep='\t',header=F,col.names=c("gene_id","gene_name","biotype","exon_count"),check.names=F)

up_col <- as.character(snakemake@params[["up_col"]])
down_col <- as.character(snakemake@params[["down_col"]])
p_threshold <- snakemake@params[["p_threshold"]]

ma_n <- snakemake@params[["ma_number"]]
volc_n <- snakemake@params[["volc_number"]]

splice_cts <- read.table(snakemake@input[["spliced"]], header=TRUE, row.names="gene", check.names=FALSE, stringsAsFactors=FALSE)
unsplice_cts <- read.table(snakemake@input[["unspliced"]], header=TRUE, row.names="gene", check.names=FALSE, stringsAsFactors=FALSE)

splice_cts <- splice_cts[ , order(names(splice_cts))]
splice_cts_names <- row.names(splice_cts)
splice_cts <- sapply(splice_cts,as.numeric)
row.names(splice_cts) <- splice_cts_names

unsplice_cts <- unsplice_cts[ , order(names(unsplice_cts))]
unsplice_cts_names <- row.names(unsplice_cts)
unsplice_cts <- sapply(unsplice_cts,as.numeric)
row.names(unsplice_cts) <- unsplice_cts_names

feature_id <- row.names(splice_cts)
temp <- data.frame(row.names(splice_cts))
temp$group_id <- "input"

group_id <- temp$group_id

coldata <- sample_table[,c("condition","replicate")]
coldata <- coldata[order(row.names(coldata)), , drop=F]

splice_control <- splice_cts[,sample_table$condition==control]
unsplice_control <- unsplice_cts[,sample_table$condition==control]
coldata_control <- coldata[sample_table$condition==control,]

# Loop for each expriment condition against control
for (a in experiments) {

splice_exp <- splice_cts[,sample_table$condition==a]
unsplice_exp <- unsplice_cts[,sample_table$condition==a]

splice_cts_exp <- cbind(splice_control,splice_exp)
unsplice_cts_exp <- cbind(unsplice_control,unsplice_exp)

coldata_exp <- rbind(coldata_control,coldata[sample_table$condition==a,])

if (paired){
  full_model <- ~sample + exon + condition:exon + replicate:exon
  reduced_model <- ~sample + exon + replicate:exon
 } else {
  full_model <- ~sample + exon + condition:exon
  reduced_model <- ~sample + exon
}

dds <- DEXSeqDataSet(countData=splice_cts_exp,sampleData=coldata_exp, featureID=feature_id, groupID=group_id, alternativeCountData = unsplice_cts_exp, design=full_model)

rds <- estimateSizeFactors(dds)
rds <- estimateDispersions(rds,formula=full_model)
rds <- testForDEU(rds,reducedModel = reduced_model,fullModel = full_model)
rds <- estimateExonFoldChanges(rds, fitExpToVar="condition")
res <- DEXSeqResults(rds)

# Generate log2FoldChange shrunk results table for each experiment condition
title <- gsub("_"," ",paste(a,"vs",control,change,sep=" "))
subtitle <- gsub("_"," ",paste(exp,prefix, counting,sep=" "))

expr <- data.frame(res@listData[1:10])
rownames(expr) <- feature_id
colnames(expr)[10] <- "Rawlog2FoldChange"
colnames(expr)[3] <- "baseMean"
#expr <- expr[!is.na(expr$padj),]
expr[11:13] <- genes[match(rownames(expr),genes$gene_id),2:4]
expr$exon <- ifelse(expr$exon_count>1,"Multiexonic","Monoexonic")
expr$change <- ifelse(expr$Rawlog2FoldChange>=0,"Upregulated","Downregulated")
expr$group <- toTitleCase(gsub("_"," ",paste(expr$exon,expr$biotype)))
expr$group2<-paste(expr$change,expr$group)
expr$log10P <- -log10(expr$padj)
expr$z <- qnorm(expr$pvalue)
expr$lfcSE <- abs(expr$Rawlog2FoldChange/expr$z)
ash <- ash(betahat=expr$Rawlog2FoldChange,sebetahat=expr$lfcSE, mixcompdist = "normal",method= "shrink")
expr$log2FoldChange <- ash$result$PosteriorMean
expr <- expr %>% arrange(group2,padj) %>% group_by(group2) %>% mutate(p_rank=1:n()) %>% ungroup
expr <- expr %>% arrange(group2,abs(log2FoldChange)) %>% group_by(group2) %>% mutate(lfc_rank=n():1) %>% ungroup

expr <- expr %>% arrange(change,padj) %>% group_by(change) %>% mutate(total_p_rank=1:n()) %>% ungroup
expr <- expr %>% arrange(change,abs(log2FoldChange)) %>% group_by(change) %>% mutate(total_lfc_rank=n():1) %>% ungroup

source(snakemake@params[["plot_script"]])

}

